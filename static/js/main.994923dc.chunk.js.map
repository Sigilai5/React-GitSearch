{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","App","props","state","username","userData","userFollowers","userFollowing","userRepos","perPage","$","ajax","url","this","clientId","clientSecret","dataType","cache","success","data","setState","bind","error","xhr","status","err","alert","console","log","getUserData","getUserFollowers","getUserFollowing","getUserRepos","Fragment","onFormSubmit","handleFormSubmit","Component","defaultProps","Profile","activeItem","toggle","tab","e","md","src","avatar_url","className","alt","radius","icon","login","email","href","html_url","style","color","to","active","onClick","role","rounded","followers","following","public_repos","tabId","map","follower","width","height","borderBottomLeftRadius","borderBottomRightRadius","borderTopRightRadius","borderTopLeftRadius","overflow","repo","name","Search","preventDefault","refs","value","trim","onSubmit","type","ref","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.994923dc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\nimport $ from \"jquery\";\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCol,MDBNav,MDBNavItem,MDBNavLink,MDBTabContent,MDBTabPane} from \"mdbreact\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: 'sigilai5',\n            userData: [],\n            userFollowers:[],\n            userFollowing:[],\n            userRepos:[],\n            perPage: 5,\n        }\n    }\n\n    //Get github user profile\n    getUserData(){\n        $.ajax({\n            url:'https://api.github.com/users/'+this.state.username +'?client_id='+this.props.clientId+'&client_secret='+this.props.clientSecret,\n            dataType:'json',\n            cache:false,\n            success:function(data){\n                this.setState({userData: data})\n            }.bind(this),\n            error:function(xhr,status,err){\n                alert(err);\n            }.bind(this)\n        });\n    }\n\n\n    //Get github user followers\n    getUserFollowers(){\n        $.ajax({\n            url:'https://api.github.com/users/'+this.state.username+'/followers',\n            dataType:'json',\n            cache:false,\n            success:function(data){\n                this.setState({userFollowers: data})\n                console.log(data);\n            }.bind(this),\n            error:function(xhr,status,err){\n                alert(err);\n            }.bind(this)\n        });\n    }\n\n    //Get github user following\n    getUserFollowing(){\n        $.ajax({\n            url:'https://api.github.com/users/'+this.state.username+'/following',\n            dataType:'json',\n            cache:false,\n            success:function(data){\n                this.setState({userFollowing: data})\n                console.log(data);\n            }.bind(this),\n            error:function(xhr,status,err){\n                alert(err);\n            }.bind(this)\n        });\n    }\n\n    //Get github repositories\n    getUserRepos(){\n        $.ajax({\n            url:'https://api.github.com/users/'+this.state.username+'/repos',\n            dataType:'json',\n            cache:false,\n            success:function(data){\n                this.setState({userRepos: data})\n                console.log(data);\n            }.bind(this),\n            error:function(xhr,status,err){\n                alert(err);\n            }.bind(this)\n        });\n    }\n\nhandleFormSubmit(username){\n        this.setState({username:username},function () {\n        this.getUserData();\n        this.getUserFollowers();\n        this.getUserFollowing();\n        this.getUserRepos();\n\n        });\n}\n\n    componentDidMount() {\n        this.getUserData();\n        this.getUserFollowers();\n        this.getUserFollowing();\n        this.getUserRepos();\n    }\n\n\n    render(){\n        return (\n            <React.Fragment>\n                <h1><center>Github Search</center></h1>\n                <Search onFormSubmit = {this.handleFormSubmit.bind(this)} />\n                <Profile\n                    userData = {this.state.userData }\n                    userFollowers = {this.state.userFollowers}\n                    userFollowing = {this.state.userFollowing}\n                    userRepos ={this.state.userRepos}\n                />\n            </React.Fragment>\n        )\n    }\n\n}\n\n\nApp.propTypes = {\n    clientId: React.PropTypes,\n    clientSecret: React.PropTypes\n};\n\nApp.defaultProps = {\n    clientId: '163d925f27b21a8a0b8e',\n    clientSecret: '3244c0d43f3c5f598cb98e3827f339764e742b24'\n}\n\n\n\nclass Profile extends Component {\n    state = {\n        activeItem: \"1\"\n    };\n\n\n    toggle = tab => e => {\n        if (this.state.activeItem !== tab) {\n            this.setState({\n                activeItem: tab\n            });\n        }\n    };\n\n    render() {\n        return(\n            <React.Fragment>\n\n                <MDBContainer>\n                    <MDBRow>\n                        <MDBCol md=\"3\">\n                            <h2><u>User</u></h2>\n                            <img\n                                src={this.props.userData.avatar_url}\n                                className=\"img-fluid\"\n                                alt=\"\"\n                                radius=\"50%\"\n                            />\n                            <br />\n                            <h3><MDBIcon icon=\"user-check\" /> {this.props.userData.login}</h3>\n                            <h5><MDBIcon icon=\"envelope\" />{this.props.userData.email}</h5>\n                            <h6><MDBIcon icon=\"location-arrow\" /> {this.props.userData.location}</h6>\n                            <a href={this.props.userData.html_url} style={{color:'white'}}><MDBBtn color=\"elegant\">Visit Profile</MDBBtn></a>\n\n\n                            </MDBCol>\n                        <MDBCol md=\"9\">\n                            <h2><u>Profile</u></h2>\n                            <MDBContainer>\n\n                                <MDBNav className=\"nav-tabs mt-5\">\n                                    <MDBNavItem>\n                                        <MDBIcon to=\"#\" active={this.state.activeItem === \"1\"} onClick={this.toggle(\"1\")} role=\"tab\" >\n                                            <MDBBtn rounded color=\"info\">{this.props.userData.followers} Followers</MDBBtn>\n                                        </MDBIcon>\n                                    </MDBNavItem>\n                                    <MDBNavItem>\n                                        <MDBIcon to=\"#\" active={this.state.activeItem === \"2\"} onClick={this.toggle(\"2\")} role=\"tab\" >\n                                            <MDBBtn rounded color=\"warning\">{this.props.userData.following} Following</MDBBtn>\n                                        </MDBIcon>\n                                    </MDBNavItem>\n                                    <MDBNavItem>\n                                        <MDBIcon to=\"#\" active={this.state.activeItem === \"3\"} onClick={this.toggle(\"3\")} role=\"tab\" >\n                                            <MDBBtn rounded color=\"danger\">{this.props.userData.public_repos} Repositrories</MDBBtn>\n                                        </MDBIcon>\n                                    </MDBNavItem>\n                                </MDBNav>\n                                <MDBTabContent activeItem={this.state.activeItem} >\n                                    <MDBTabPane tabId=\"1\" role=\"tabpanel\">\n                                        <p className=\"mt-2\">\n\n                                            {this.props.userFollowers.map(follower => (\n\n                                                <p><a href={follower.html_url}>\n                                                    <img\n                                                        src={follower.avatar_url}\n                                                        className=\"img-fluid\"\n                                                        alt=\"\"\n                                                        width=\"80px\"\n                                                        style={{width: 100,\n                                                            height: 100,\n                                                            //Below lines will help to set the border radius\n                                                            borderBottomLeftRadius: 50,\n                                                            borderBottomRightRadius: 50,\n                                                            borderTopRightRadius: 50,\n                                                            borderTopLeftRadius: 50,\n                                                            overflow: 'hidden',}}\n\n                                                    />\n                                                    @{follower.login}\n                                                </a>\n                                                </p>\n\n\n                                            ))}\n\n                                        </p>\n                                    </MDBTabPane>\n                                    <MDBTabPane tabId=\"2\" role=\"tabpanel\">\n                                        <p className=\"mt-2\">\n\n                                            {this.props.userFollowing.map(follower => (\n\n                                                <p><a href={follower.html_url}>\n                                                    <img\n                                                        src={follower.avatar_url}\n                                                        className=\"img-fluid\"\n                                                        alt=\"\"\n                                                        width=\"80px\"\n                                                        style={{width: 100,\n                                                            height: 100,\n                                                            //Below lines will help to set the border radius\n                                                            borderBottomLeftRadius: 50,\n                                                            borderBottomRightRadius: 50,\n                                                            borderTopRightRadius: 50,\n                                                            borderTopLeftRadius: 50,\n                                                            overflow: 'hidden',}}\n\n                                                    />\n                                                    @{follower.login}\n                                                </a>\n                                                </p>\n\n\n                                            ))}\n\n                                        </p>\n\n                                    </MDBTabPane>\n                                    <MDBTabPane tabId=\"3\" role=\"tabpanel\">\n                                        <p className=\"mt-2\">\n\n                                            {this.props.userRepos.map(repo => (\n\n                                                <p><a href={repo.html_url}>\n                                                    <img\n                                                        src={this.props.userData.avatar_url}\n                                                        className=\"img-fluid\"\n                                                        alt=\"\"\n                                                        width=\"80px\"\n                                                        style={{width: 100,\n                                                            height: 100,\n                                                            //Below lines will help to set the border radius\n                                                            borderBottomLeftRadius: 50,\n                                                            borderBottomRightRadius: 50,\n                                                            borderTopRightRadius: 50,\n                                                            borderTopLeftRadius: 50,\n                                                            overflow: 'hidden',}}\n\n                                                    />\n                                                    {repo.name}\n                                                </a>\n                                                </p>\n\n\n                                            ))}\n\n                                        </p>\n                                    </MDBTabPane>\n                                </MDBTabContent>\n                            </MDBContainer>\n                        </MDBCol>\n\n                    </MDBRow>\n                </MDBContainer>\n\n            </React.Fragment>\n        )\n    }\n}\n\nclass Search extends Component {\n    onSubmit(e){\n        e.preventDefault();\n        let username = this.refs.username.value.trim();\n        if(!username){\n            alert('Please enter a valid username');\n            return;\n        }\n        this.props.onFormSubmit(username);\n        this.refs.username.value = '';\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                <form onSubmit={this.onSubmit.bind(this)}>\n                    <label>Search Users</label>\n                    <input type=\"text\" ref=\"username\" className=\"form-control\" />\n\n                </form>\n            </React.Fragment>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}